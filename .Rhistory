setwd("E:/Documents/Kuliah/Semester 5/Prak DS/Project Akhir")
data_bersih <- read.csv('text_processing.csv', na.strings = c(""))
lexicon <- read.csv('ind_lexicon.csv')
library(tidyr)
library(dplyr)
data_bersih <- distinct(data_bersih, tweet_clean, .keep_all = TRUE)
data_bersih <- drop_na(data_bersih)
library(stringr)
score.sentiment = function(kalimat, word, sentimen){
kalimat <- gsub('[[:punct:]]', '', kalimat)
kalimat <- gsub('[[:cntrl:]]', '', kalimat)
kalimat <- gsub('\\d+', '', kalimat)
kalimat <- tolower(kalimat)
list.kata <- str_split(kalimat, '\\s+')
kata2 <- unlist(list.kata)
matches <- match(kata2, word)
matches <- matches[!is.na(matches)]
x <- as.numeric(sentimen[matches])
i <- length(matches)
score = sum(x)/i
return(as.numeric(score))
}
data_bersih$sentimen_score <- sapply(data_bersih$tweet_clean, score.sentiment, lexicon$word, lexicon$value)
data_bersih$sentimen_score[is.na(data_bersih$sentimen_score)] = 0
#without emot
klasifikasi <- function(sentimen){
sentiment <- ifelse(sentimen < 0, "Negatif" , ifelse(sentimen >0 , "Positif" , "Netral"))
return(sentiment)
}
data_bersih$klasifikasi <- sapply(data_bersih$sentimen_score, klasifikasi)
#with emot
data_bersih$klasifikasi_emot <- ifelse( (data_bersih$sentimen_score * 0.6 +  data_bersih$emoticon_sentimen_score *0.4) < 0, "Negatif" , ifelse( (data_bersih$sentimen_score * 0.6 +  data_bersih$emoticon_sentimen_score *0.4) > 0 , "Positif" , "Netral"))
library(RTextTools)
trainids <- seq(1, floor(nrow(data_bersih)*0.7))
testids <- seq(floor(nrow(data_bersih)*0.7)+1, nrow(data_bersih))
#withou emot
training_data <- data_bersih[sample(trainids ,replace=FALSE),]
training_data <- select(training_data,tweet = tweet_clean,klasifikasi = klasifikasi)
training_data$tweet <- sapply(training_data$tweet, iconv, from = "latin1", to = "ASCII", sub="")
#with emot
training_data1 <- data_bersih[sample(trainids ,replace=FALSE),]
training_data1 <- select(training_data1,tweet = tweet_clean,klasifikasi = klasifikasi_emot)
library(tm)
#without emot
matrix <- create_matrix(training_data$tweet, weighting=weightTfIdf)
container <- create_container(matrix, t(training_data$klasifikasi), trainSize=trainids, virgin=FALSE)
#with emot
matrix1 <- create_matrix(training_data1$tweet, weighting=weightTfIdf)
container1 <- create_container(matrix1, t(training_data1$klasifikasi), trainSize=trainids, virgin=FALSE)
#without emot
model <- train_model(container, "SVM", kernel="linear", cost=1)
#with emot
model1 <- train_model(container1, "SVM", kernel="linear", cost=1)
#without emot
predMatrix <- create_matrix(data_bersih$tweet_clean, originalMatrix=matrix)
predSize = length(data_bersih$tweet_clean);
predictionContainer <- create_container(predMatrix, labels=rep(0,predSize), testSize=1:predSize, virgin=FALSE)
results <- classify_model(predictionContainer, model)
results
#with emot
predMatrix1 <- create_matrix(data_bersih$tweet_clean, originalMatrix=matrix1)
predSize1 = length(data_bersih$tweet_clean);
predictionContainer1 <- create_container(predMatrix1, labels=rep(0,predSize1), testSize=1:predSize1, virgin=FALSE)
results1 <- classify_model(predictionContainer1, model1)
results1
#without emot
eval <- create_precisionRecallSummary(container, results)
library(tm)
#without emot
matrix <- create_matrix(training_data$tweet, weighting=weightTfIdf)
container <- create_container(matrix, t(training_data$klasifikasi), trainSize=trainids, testSize=testids, virgin=FALSE)
library(RTextTools)
trainids <- seq(1, floor(nrow(data_bersih)*0.7))
testids <- seq(floor(nrow(data_bersih)*0.7)+1, nrow(data_bersih))
#withou emot
training_data <- data_bersih[sample(trainids ,replace=FALSE),]
training_data <- select(training_data,tweet = tweet_clean,klasifikasi = klasifikasi)
training_data$tweet <- sapply(training_data$tweet, iconv, from = "latin1", to = "ASCII", sub="")
#with emot
training_data1 <- data_bersih[sample(trainids ,replace=FALSE),]
training_data1 <- select(training_data1,tweet = tweet_clean,klasifikasi = klasifikasi_emot)
library(tm)
#without emot
matrix <- create_matrix(training_data$tweet, weighting=weightTfIdf)
container <- create_container(matrix, t(training_data$klasifikasi), trainSize=trainids, testSize=testids, virgin=FALSE)
View(container)
library(RTextTools)
trainids <- seq(1, floor(nrow(data_bersih)*0.7))
testids <- seq(floor(nrow(data_bersih)*0.7)+1, nrow(data_bersih))
#withou emot
training_data <- data_bersih[sample(trainids ,replace=FALSE),]
training_data <- select(training_data,tweet = tweet_clean,klasifikasi = klasifikasi)
training_data$tweet <- sapply(training_data$tweet, iconv, from = "latin1", to = "ASCII", sub="")
#with emot
training_data1 <- data_bersih[sample(trainids ,replace=FALSE),]
training_data1 <- select(training_data1,tweet = tweet_clean,klasifikasi = klasifikasi_emot)
library(tm)
#without emot
matrix <- create_matrix(training_data$tweet, weighting=weightTfIdf)
container <- create_container(matrix, t(training_data$klasifikasi), trainSize=trainids, testSize=testids, virgin=FALSE)
library(RTextTools)
#trainids <- seq(1, floor(nrow(data_bersih)*0.7))
#testids <- seq(floor(nrow(data_bersih)*0.7)+1, nrow(data_bersih))
#withou emot
training_data <- data_bersih[sample(1:885, size = 885 ,replace=FALSE),]
training_data <- select(training_data,tweet = tweet_clean,klasifikasi = klasifikasi)
training_data$tweet <- sapply(training_data$tweet, iconv, from = "latin1", to = "ASCII", sub="")
#with emot
training_data1 <- data_bersih[sample(1:885, size = 885 ,replace=FALSE),]
training_data1 <- select(training_data1,tweet = tweet_clean,klasifikasi = klasifikasi_emot)
library(tm)
#without emot
matrix <- create_matrix(training_data$tweet, weighting=weightTfIdf)
container <- create_container(matrix, t(training_data$klasifikasi), trainSize=1:619, testSize=620:885, virgin=FALSE)
#with emot
matrix1 <- create_matrix(training_data1$tweet, weighting=weightTfIdf)
container1 <- create_container(matrix1, t(training_data1$klasifikasi), trainSize=1:619, testSize=620:885, virgin=FALSE)
#without emot
model <- train_model(container, "SVM", kernel="linear", cost=1)
#with emot
model1 <- train_model(container1, "SVM", kernel="linear", cost=1)
#without emot
#predMatrix <- create_matrix(data_bersih$tweet_clean, originalMatrix=matrix)
#predSize = length(data_bersih$tweet_clean);
#predictionContainer <- create_container(predMatrix, labels=rep(0,predSize), testSize=1:predSize, virgin=FALSE)
results <- classify_model(container, model)
results
#with emot
#predMatrix1 <- create_matrix(data_bersih$tweet_clean, originalMatrix=matrix1)
#predSize1 = length(data_bersih$tweet_clean);
#predictionContainer1 <- create_container(predMatrix1, labels=rep(0,predSize1), testSize=1:predSize1, virgin=FALSE)
results1 <- classify_model(container1, model1)
results1
#without emot
eval <- create_precisionRecallSummary(container, results)
#with emot
eval1 <- create_precisionRecallSummary(container1, results1)
#without emot
eval <- create_precisionRecallSummary(container, results)
eval
#with emot
eval1 <- create_precisionRecallSummary(container1, results1)
eval1
#without emot
eval <-  create_scoreSummary(container, results)
eval
#with emot
eval1 <-  create_scoreSummary(container1, results1)
eval1
#without emot
eval <-  create_analytics(container, results)
#without emot
eval <-  create_scoreSummary(container, results)
eval
#with emot
eval1 <-  create_scoreSummary(container1, results1)
eval1
#without emot
eval <- create_precisionRecallSummary(container, results)
eval
#with emot
eval1 <- create_precisionRecallSummary(container1, results1)
eval1
recall_accuracy(results$SVM_PROB, results$SVM_LABEL)
#without emot
recall_accuracy(results$SVM_PROB, results$SVM_LABEL)
#with emot
recall_accuracy(results1$SVM_PROB, results1$SVM_LABEL)
#without emot
eval <- create_precisionRecallSummary(container, results)
eval
#with emot
eval1 <- create_precisionRecallSummary(container1, results1)
eval1
setwd("E:/Documents/Kuliah/Semester 5/Prak DS/Project Akhir")
data_bersih <- read.csv('text_processing.csv', na.strings = c(""))
lexicon <- read.csv('ind_lexicon.csv')
library(tidyr)
library(dplyr)
data_bersih <- distinct(data_bersih, tweet_clean, .keep_all = TRUE)
data_bersih <- drop_na(data_bersih)
library(stringr)
score.sentiment = function(kalimat, word, sentimen){
kalimat <- gsub('[[:punct:]]', '', kalimat)
kalimat <- gsub('[[:cntrl:]]', '', kalimat)
kalimat <- gsub('\\d+', '', kalimat)
kalimat <- tolower(kalimat)
list.kata <- str_split(kalimat, '\\s+')
kata2 <- unlist(list.kata)
matches <- match(kata2, word)
matches <- matches[!is.na(matches)]
x <- as.numeric(sentimen[matches])
i <- length(matches)
score = sum(x)/i
return(as.numeric(score))
}
data_bersih$sentimen_score <- sapply(data_bersih$tweet_clean, score.sentiment, lexicon$word, lexicon$value)
data_bersih$sentimen_score[is.na(data_bersih$sentimen_score)] = 0
#without emot
klasifikasi <- function(sentimen){
sentiment <- ifelse(sentimen < 0, "Negatif" , ifelse(sentimen >0 , "Positif" , "Netral"))
return(sentiment)
}
data_bersih$klasifikasi <- sapply(data_bersih$sentimen_score, klasifikasi)
#with emot
data_bersih$klasifikasi_emot <- ifelse( (data_bersih$sentimen_score * 0.6 +  data_bersih$emoticon_sentimen_score *0.4) < 0, "Negatif" , ifelse( (data_bersih$sentimen_score * 0.6 +  data_bersih$emoticon_sentimen_score *0.4) > 0 , "Positif" , "Netral"))
library(stringr)
score.sentiment = function(kalimat, word, sentimen){
kalimat <- gsub('[[:punct:]]', '', kalimat)
kalimat <- gsub('[[:cntrl:]]', '', kalimat)
kalimat <- gsub('\\d+', '', kalimat)
kalimat <- tolower(kalimat)
list.kata <- str_split(kalimat, '\\s+')
kata2 <- unlist(list.kata)
matches <- match(kata2, word)
matches <- matches[!is.na(matches)]
x <- as.numeric(sentimen[matches])
i <- length(matches)
score = sum(x)/i
return(as.numeric(score))
}
data_bersih$sentimen_score <- sapply(data_bersih$tweet_clean, score.sentiment, lexicon$word, lexicon$value)
data_bersih$sentimen_score[is.na(data_bersih$sentimen_score)] = 0
#without emot
klasifikasi <- function(sentimen){
sentiment <- ifelse(sentimen < 0, "Negatif" , ifelse(sentimen >0 , "Positif" , "Netral"))
return(sentiment)
}
data_bersih$klasifikasi <- sapply(data_bersih$sentimen_score, klasifikasi)
#with emot
data_bersih$klasifikasi_emot <- ifelse( (data_bersih$sentimen_score * 0.6 +  data_bersih$emoticon_sentimen_score *0.4) < 0, "Negatif" , ifelse( (data_bersih$sentimen_score * 0.6 +  data_bersih$emoticon_sentimen_score *0.4) > 0 , "Positif" , "Netral"))
library(RTextTools)
#trainids <- seq(1, floor(nrow(data_bersih)*0.7))
#testids <- seq(floor(nrow(data_bersih)*0.7)+1, nrow(data_bersih))
#withou emot
training_data <- data_bersih[sample(1:885, size = 885 ,replace=FALSE),]
training_data <- select(training_data,tweet = tweet_clean,klasifikasi = klasifikasi)
training_data$tweet <- sapply(training_data$tweet, iconv, from = "latin1", to = "ASCII", sub="")
#with emot
training_data1 <- data_bersih[sample(1:885, size = 885 ,replace=FALSE),]
training_data1 <- select(training_data1,tweet = tweet_clean,klasifikasi = klasifikasi_emot)
library(tm)
#without emot
matrix <- create_matrix(training_data$tweet, weighting=weightTfIdf)
container <- create_container(matrix, t(training_data$klasifikasi), trainSize=1:619, testSize=620:885, virgin=FALSE)
#with emot
matrix1 <- create_matrix(training_data1$tweet, weighting=weightTfIdf)
container1 <- create_container(matrix1, t(training_data1$klasifikasi), trainSize=1:619, testSize=620:885, virgin=FALSE)
#without emot
model <- train_model(container, "SVM", kernel="linear", cost=1)
#with emot
model1 <- train_model(container1, "SVM", kernel="linear", cost=1)
#without emot
#predMatrix <- create_matrix(data_bersih$tweet_clean, originalMatrix=matrix)
#predSize = length(data_bersih$tweet_clean);
#predictionContainer <- create_container(predMatrix, labels=rep(0,predSize), testSize=1:predSize, virgin=FALSE)
results <- classify_model(container, model)
results
#with emot
#predMatrix1 <- create_matrix(data_bersih$tweet_clean, originalMatrix=matrix1)
#predSize1 = length(data_bersih$tweet_clean);
#predictionContainer1 <- create_container(predMatrix1, labels=rep(0,predSize1), testSize=1:predSize1, virgin=FALSE)
results1 <- classify_model(container1, model1)
results1
#without emot
eval <- create_precisionRecallSummary(container, results)
eval
#with emot
eval1 <- create_precisionRecallSummary(container1, results1)
eval1
#without emot
recall_accuracy(results$SVM_PROB, results$SVM_LABEL)
#with emot
recall_accuracy(results1$SVM_PROB, results1$SVM_LABEL)
View(container)
#without emot
eval <-  create_analytics((container, results)
#without emot
eval <-  create_analytics(container, results)
#without emot
eval <-  create_analytics(container, classification_results = results)
#without emot
eval <- create_precisionRecallSummary(container, results)
eval
#with emot
eval1 <- create_precisionRecallSummary(container1, results1)
eval1
#without emot
recall_accuracy(container, results$SVM_LABEL)
View(container)
#without emot
eval <- create_scoreSummary(container, results)
eval
#with emot
eval1 <- create_precisionRecallSummary(container1, results1)
eval1
#without emot
eval <- create_scoreSummary(container, results)
eval
#with emot
eval1 <- create_scoreSummary(container1, results1)
eval1
#without emot
eval <- create_scoreSummary(container, results$SVM_LABEL)
#without emot
eval <- create_scoreSummary(container, results$)
#without emot
eval <- create_scoreSummary(container, results$)
#without emot
eval <- create_scoreSummary(container, results)
eval
#with emot
eval1 <- create_scoreSummary(container1, results1)
eval1
#without emot
recall_accuracy(eval$BEST_PROB, eval$SVM_LABEL)
#with emot
recall_accuracy(eval1$BEST_PROB, eval1$SVM_LABEL)
View(results)
View(training_data)
View(eval)
View(container)
